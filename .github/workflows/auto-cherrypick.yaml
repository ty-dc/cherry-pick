name: Auto CherryPick PR

permissions: write-all

env:
  PR_LABEL_PREFIX_CHERRYPICK: "cherrypick-"
  CHERRYPICK_LABEL: "robot-cherrypick"
  DEFAULT_REVIEWER: "ty-dc"

on:
  push:
    branches:
      - 'release-*'
      - 'main'
  pull_request:
    branches:
      - main
      - 'release-*'
    types: ["closed"]
  workflow_dispatch:
    inputs:
      prNumber:
        description: 'pr number'
        required: true
      destBranch:
        description: 'dest branch, if empty, follow the pr label'
        required: false

jobs:
  cherry_pick:
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.pull_request.labels.*.name, 'release-v0.8') && github.event.pull_request.merged == true }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: get label and pr number
        env:
          GITHUB_TOKEN: ${{ secrets.WELAN_PAT }}
          JSON: ${{ toJSON(github) }}
        run: |
          set -x
          echo "============ print var ======== "
          if ${{ github.event_name == 'workflow_dispatch' }}; then
                PR_NUMBER=${{ github.event.inputs.prNumber }}
          else
                grep -Eio "Merge pull request #[0-9]+ " <<< "${JSON}" || true
                echo "try to get PR from commit"
                COMMIT=` echo "${JSON}" | jq '.event.commits[0].id' | tr -d '"' ` || true
                if [ -n "${COMMIT}" ]; then
                    PR_NUMBER=`curl  --retry 10  -s -H "Accept: application/vnd.github.groot-preview+json"  https://api.github.com/repos/${{ github.repository }}/commits/${COMMIT}/pulls | jq -r '.[].number' `
                else
                    echo "error, failed to get any commit ID"
                fi
                if [ -z "${PR_NUMBER}" ] ; then
                    PR_NUMBER=` grep -Eio "Merge pull request #[0-9]+ " <<< "${JSON}" | grep -Eo "[0-9]+" | uniq ` || true
                fi
                if [ -z "${PR_NUMBER}" ] ; then
                    echo "error, failed to get PR NUMBER"
                    exit 1
                fi
                #    grep -Ei "https://github.com/.*/commit" <<< "${JSON}"
                #PR_COMMITS=` grep -Ei "https://github.com/.*/commit" <<< "${JSON}" | awk -F'"' '{print $4}' | uniq -c | awk '{ if ($1 == 1 ) print $2}' | awk -F'/' '{print $NF}' | tr '\n' ' '  `
                #    grep '"username":'  <<< "${JSON}"
                #PR_AUTHOR=` grep '"username":' <<< "${JSON}" | awk -F'"' '{print $4}' | sort | uniq  | grep -v "web-flow"  | head -1 | tr -d '\n' `
                #    [ -n "${PR_AUTHOR}" ] || { echo "no PR_AUTHOR, ignore" ; }
          #
          fi
          RP_API_BODY=` curl  --retry 10  https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER} -s -H "Accept: application/vnd.github.groot-preview+json" `
          PR_COMMITS=` echo "${RP_API_BODY}" |  jq ' .merge_commit_sha ' | tr -d '"' `
          PR_AUTHOR=` echo "${RP_API_BODY}" |  jq ' .user.login ' | tr -d '"' `
          PR_URL="https://github.com/${{ github.repository }}/pull/${PR_NUMBER}"
          ACTION_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          #gh pr view ${PR_NUMBER} || { echo "failed to get pr ${PR_NUMBER}" ; exit 1 ; }
          #PR_LABEL=` gh pr view ${PR_NUMBER} | grep -i "^labels:" | tr ',' ' ' | tr -s ' ' | sed 's/labels://g' `
          #    [ -n "${PR_LABEL}" ] || { echo "no PR_LABEL, ignore" ; }
          PR_LABEL=` echo "${RP_API_BODY}" |  jq ' .labels[].name ' | tr -d '"' | tr '\n' ' ' `
          #PR_TITLE=`gh pr view ${PR_NUMBER} | sed -n '1 p' `
          #     [ -n "${PR_TITLE}" ] || { echo "error, no PR_TITLE " ; exit 1 ; }
          PR_TITLE=` echo "${RP_API_BODY}" |  jq ' .title ' | tr -d '"' `
          #
          if [ -z "${PR_COMMITS}" ]; then
              echo "error, failed to get pr commits"
          fi
          echo "number: ${PR_NUMBER}"
          echo "action url: ${ACTION_URL}"
          echo "PR_COMMITS: ${PR_COMMITS}"
          echo "author: ${PR_AUTHOR}"
          echo "url: ${PR_URL}"
          echo "PR_LABEL: ${PR_LABEL}"
          echo "PR_TITLE: ${PR_TITLE}"
          echo "PR_AUTHOR=${PR_AUTHOR}" >> $GITHUB_ENV
          echo "PR_LABEL=${PR_LABEL}" >> $GITHUB_ENV
          echo "PR_LABEL=${PR_LABEL}" >> $GITHUB_ENV
          echo "PR_TITLE=${PR_TITLE}" >> $GITHUB_ENV
          echo "PR_URL=${PR_URL}" >> $GITHUB_ENV
          #
          #
          echo "=============================== get dest branch from labels ======== "
          WANT_MERGE_BRANCH_LIST=""
          if ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.destBranch != '' }}; then
                WANT_MERGE_BRANCH_LIST=${{ github.event.inputs.destBranch }}
          else
                for LABEL in ${PR_LABEL} ; do
                    echo "checking label $LABEL "
                    PREFIX="${{ env.PR_LABEL_PREFIX_CHERRYPICK }}"
                    grep -E "^${PREFIX}" <<< "${LABEL}" &>/dev/null || continue
                    BRANCH_NAME=` sed 's?'"${PREFIX}"'??' <<< "$LABEL" `
                    WANT_MERGE_BRANCH_LIST+=" $BRANCH_NAME "
                done
          fi
          [ -z "$WANT_MERGE_BRANCH_LIST" ] && echo "no branch to cherry pick" && exit 0
          echo "cherry pick to $WANT_MERGE_BRANCH_LIST "

      - name: Cherry pick
        uses: carloscastrojumo/github-cherry-pick-action@v1.0.9
        with:
          branch: release-v0.8
          labels: |
            ${{ env.PR_LABEL }}
          reviewers: |
            ${PR_AUTHOR},${{ env.DEFAULT_REVIEWER }}
